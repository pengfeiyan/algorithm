#coding=utf-8
from imooc.dataStructure.two.RandomTestcase import *

'''算法复杂度是O(n^2)'''

''' 测试算法的性能 '''
def testSort(sortName, sortfunc, arr, n):
    start = time.time()
    sortfunc(arr, n)
    end = time.time()
    # assert (isSorted(arr, n))
    print("%s:%f" % (sortName, end-start))
    return

'''性能比选择排序要慢，原因是选择排序是比较，最后复制，而插入排序是交换，交换是三次赋值，所以要慢，因此进行了改进。'''
# def InsertionSort(arr,n):
#     for i in range(1,n):
#         # 寻找arr[i]合适的插入位置
#
#         # for j in range(i,0,-1):
#         #     if arr[j] < arr[j-1]:
#         #         arr[j],arr[j-1] = arr[j-1],arr[j]
#         #     else:
#         #         break
#         j=i
#         while j>0 and arr[j]<arr[j-1]:
#                 arr[j], arr[j-1] = arr[j-1], arr[j]
#                 j-=1

'''改进的插入排序'''
def InsertionSort(arr,n):
    for i in range(1,n):
        key = arr[i]
        j = i # 保存元素key应该插入的位置
        while j>0 and arr[j-1]>key:
            arr[j] = arr[j-1]
            j-=1
        arr[j] = key

arr = generateRandomArray(10000, 0, 10000)

''' 下面是有序的序列，排序时间为0.00，而选择排序是0.044'''
# arr = [61, 167, 196, 202, 323, 633, 654, 732, 875, 919, 1103, 1156, 1160, 1193, 1298, 1418, 1433, 1503, 1617, 1663, 1711, 1734, 1754, 1891, 1916, 1942, 2007, 2066, 2228, 2263, 2453, 2593, 2708, 2732, 2807, 2853, 2992, 3280, 3340, 3503, 3761, 3829, 3915, 3915, 3977, 3994, 4024, 4091, 4122, 4209, 4880, 5040, 5163, 5264, 5499, 5521, 5673, 5732, 5738, 5742, 5877, 6223, 6334, 6340, 6381, 6392, 6419, 6469, 6531, 6670, 6715, 7285, 7349, 7360, 7467, 7550, 7698, 7778, 7818, 7898, 8005, 8527, 8689, 8716, 8777, 8929, 9002, 9221, 9368, 9377, 9497, 9505, 9531, 9553, 9678, 9859, 10011, 10087, 10150, 10370, 10431, 10482, 10519, 10899, 10931, 10934, 11008, 11038, 11050, 11061, 11085, 11217, 11247, 11344, 11389, 11477, 11526, 11539, 11555, 11901, 11918, 11964, 12082, 12372, 12799, 12863, 12905, 12971, 13069, 13505, 13553, 13567, 13586, 13596, 13629, 13689, 13874, 13937, 13937, 13941, 13987, 14282, 14351, 14484, 14497, 14548, 14684, 14748, 14896, 14984, 15192, 15206, 15254, 15263, 15269, 15427, 15526, 15804, 16039, 16091, 16227, 16347, 16458, 16531, 16706, 16800, 16838, 16934, 17129, 17207, 17410, 17607, 17888, 17943, 17961, 18029, 18073, 18478, 18481, 18541, 19063, 19118, 19283, 19402, 19456, 19490, 19497, 19529, 19903, 19937, 19943, 19958, 20126, 20210, 20340, 20499, 20612, 20689, 20709, 20718, 21133, 21149, 21178, 21351, 21472, 21660, 21764, 21870, 22001, 22008, 22011, 22267, 22401, 22655, 22805, 23146, 23157, 23159, 23327, 23352, 23407, 23557, 23617, 23640, 23968, 24032, 24170, 24332, 24499, 24601, 24675, 24707, 24751, 25108, 25145, 25175, 25194, 25323, 25454, 25756, 25986, 26190, 26230, 26302, 26365, 26524, 26536, 26589, 26739, 26819, 27137, 27227, 27262, 27350, 27667, 27706, 27731, 27743, 27836, 27852, 27852, 27922, 27936, 28029, 28060, 28263, 28283, 28414, 28532, 28545, 28677, 28738, 28849, 28860, 28930, 28958, 29004, 29217, 29303, 29432, 29503, 29725, 29891, 29918, 30005, 30012, 30116, 30347, 30373, 30695, 30857, 31028, 31031, 31032, 31352, 31463, 31588, 31634, 31703, 31736, 31744, 31973, 32044, 32062, 32267, 32374, 32396, 32542, 32704, 32730, 32761, 32864, 32869, 33035, 33113, 33147, 33162, 33254, 33363, 33427, 33466, 33475, 33578, 33590, 33650, 33703, 33815, 33815, 33844, 33853, 33960, 34089, 34107, 34201, 34472, 34514, 34535, 34549, 34685, 34965, 35088, 35152, 35153, 35166, 35309, 35326, 35783, 35800, 35858, 35942, 36005, 36040, 36111, 36261, 36533, 36667, 36732, 36779, 36864, 36950, 37212, 37283, 37287, 37358, 37390, 37588, 37663, 37848, 37926, 37930, 38159, 38325, 38373, 38415, 38543, 38622, 38822, 39066, 39243, 39405, 39490, 39496, 39559, 39586, 39589, 39960, 39988, 40015, 40021, 40047, 40167, 40214, 40247, 40270, 40272, 40364, 40450, 40568, 40663, 40674, 40726, 40771, 40878, 40913, 41049, 41084, 41089, 41140, 41289, 41387, 41710, 41898, 41989, 41996, 42157, 42202, 42323, 42433, 42492, 42639, 42660, 42729, 42978, 43028, 43125, 43155, 43156, 43462, 43588, 43642, 43737, 43786, 43858, 43890, 43924, 44038, 44160, 44202, 44355, 44517, 44581, 44611, 44632, 44670, 44725, 44973, 45063, 45150, 45220, 45561, 45579, 45730, 45817, 45931, 45937, 45971, 46101, 46147, 46344, 46443, 46669, 46811, 46840, 46940, 47095, 47105, 47244, 47601, 47732, 47743, 47808, 47838, 48104, 48238, 48245, 48627, 48658, 48660, 48847, 49122, 49205, 49319, 49340, 49502, 49695, 49868, 49993, 50254, 50348, 50418, 50459, 50522, 50556, 50589, 50634, 50717, 50722, 50798, 50805, 50862, 50969, 50992, 51113, 51217, 51253, 51358, 51372, 51376, 51493, 51562, 51636, 51644, 51699, 51952, 52252, 52423, 52444, 52600, 52661, 52683, 52742, 52807, 52859, 52901, 53022, 53074, 53295, 53359, 53438, 53521, 53541, 53627, 53674, 54035, 54065, 54099, 54134, 54173, 54316, 54446, 54649, 54762, 54822, 54879, 54938, 55033, 55053, 55178, 55204, 55254, 55272, 55439, 55570, 55759, 55813, 56152, 56201, 56233, 56252, 56277, 56499, 56522, 56571, 56692, 56963, 57062, 57089, 57152, 57192, 57234, 57254, 57322, 57332, 57376, 57449, 57567, 57600, 57686, 57728, 57860, 57927, 57980, 58201, 58263, 58314, 58404, 58519, 58530, 58569, 58587, 58765, 58780, 58866, 59126, 59155, 59387, 59787, 59820, 60022, 60161, 60239, 60264, 60285, 60513, 60514, 60759, 60926, 61214, 61221, 61385, 61487, 61533, 61550, 61596, 61672, 61710, 61904, 62073, 62111, 62366, 62559, 62868, 62871, 62891, 62957, 62981, 63098, 63179, 63229, 63263, 63536, 63565, 63699, 63722, 63820, 64365, 64440, 64534, 64555, 64709, 64810, 64873, 64894, 65197, 65208, 65286, 65379, 65441, 65525, 65593, 65638, 65657, 65685, 65707, 65725, 66017, 66138, 66254, 66299, 66545, 66723, 66742, 66857, 66858, 67189, 67288, 67293, 67293, 67317, 67412, 67514, 67518, 67587, 67590, 67952, 68046, 68047, 68048, 68099, 68150, 68200, 68269, 68275, 68283, 68307, 68313, 68337, 68387, 68458, 68509, 68784, 68969, 69005, 69012, 69084, 69291, 69364, 69445, 69467, 69516, 69543, 69564, 69634, 69723, 69730, 69827, 69832, 69948, 70063, 70070, 70535, 70552, 70775, 70919, 71026, 71065, 71356, 71475, 71589, 71633, 71823, 72037, 72288, 72312, 72362, 72382, 72473, 72483, 72655, 72758, 72925, 73063, 73138, 73247, 73499, 73706, 74045, 74170, 74202, 74236, 74445, 74613, 74657, 74730, 75160, 75377, 75511, 75577, 75638, 75828, 75982, 76063, 76079, 76176, 76321, 76690, 76813, 77006, 77008, 77043, 77419, 77423, 77465, 77509, 77549, 77645, 77655, 77683, 77781, 77886, 77967, 77977, 77993, 78047, 78266, 78320, 78412, 78421, 78462, 78835, 79018, 79065, 79154, 79181, 79253, 79377, 79505, 79526, 79604, 79609, 79622, 79639, 79658, 79663, 79789, 79831, 79834, 79870, 79951, 80059, 80170, 80187, 80712, 80736, 81124, 81168, 81346, 81403, 81427, 81429, 81439, 81440, 81673, 81735, 81762, 81795, 81827, 81927, 82066, 82084, 82348, 82545, 82545, 82966, 83061, 83107, 83169, 83357, 83429, 83432, 83581, 83627, 83653, 83659, 83691, 83948, 84012, 84423, 84473, 84499, 84718, 84743, 84748, 84750, 84922, 85054, 85325, 85352, 85444, 85922, 85963, 86072, 86145, 86284, 86349, 86353, 86404, 86450, 86569, 86579, 86582, 86679, 86739, 86756, 86937, 87046, 87335, 87374, 87408, 87472, 87658, 87683, 87727, 87825, 88141, 88184, 88305, 88333, 88397, 88491, 88702, 88816, 89001, 89011, 89119, 89257, 89406, 89447, 89604, 89750, 89779, 89859, 89923, 89929, 89971, 90074, 90102, 90177, 90224, 90242, 90281, 90474, 90574, 90686, 90729, 90869, 91087, 91124, 91304, 91348, 91358, 91416, 91450, 91587, 91710, 91777, 91964, 91984, 91994, 92083, 92185, 92186, 92236, 92296, 92390, 92480, 92551, 92751, 93118, 93280, 93311, 93322, 93544, 93819, 93913, 93985, 93993, 94079, 94185, 94194, 94294, 94329, 94340, 94398, 94643, 94697, 94774, 94937, 94941, 94988, 94995, 95003, 95036, 95037, 95389, 95433, 95449, 95553, 95611, 95704, 95746, 96061, 96066, 96229, 96263, 96564, 96565, 96630, 96676, 96738, 96815, 96870, 96922, 97158, 97256, 97260, 97343, 97388, 97463, 97520, 97850, 97957, 97959, 98350, 98396, 98446, 98472, 98523, 98544, 98776, 98789, 98849, 99043, 99113, 99113, 99174, 99205, 99232, 99473, 99575]

#InsertionSort(arr,len(arr))
#print(arr)
testSort("InsertionSort", InsertionSort, arr, len(arr))

'''插入排序在排序近乎有序的数组的时候，性能甚至比nlogn的算法还要快，排序有序的数组是，时间复杂度是O(n)'''